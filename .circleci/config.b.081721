# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: "Destroy environment"
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
          when: on_fail

# Use a package of configuration called an orb.
# jobs section
jobs:
  print_hello: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Throw an error
          command: return 1
          when: always
      - run: 
          name: On Failure
          when: on_fail
          command: echo "Job failed"
  create_infrastructure:
     docker:
        - image: amazon/aws-cli
     steps: 
       - checkout
       - run:
            name: Create Stack
            command: |
              aws cloudformation deploy \
              --template-file template.yml \
              --stack-name prod-${CIRCLE_WORKFLOW_ID}
       - run:
          name: Throw an error
          command: return 1
          when: always
       - destroy_environment      
  configure_infrastructure:
     docker:
        - image: python:3.7-alpine3.11
     steps: 
        - checkout
        - add_ssh_keys:
            fingerprints: ["bb:7d:58:5e:44:1f:e0:48:8b:ab:e2:8c:4e:92:b5:ed"]
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
        - run:
            name: Configure server using ansible playbook
            command: |
              ansible-playbook -i inventory.txt playbook.yml
  smoke_test:
     docker:
        - image: alpine:latest
     steps: 
        - run:
            name: Install dependencies
            command: |
              apk add --update curl
        - run:
            name: Execute smoke test
            command: |
              URL="https://blog.udacity333.com/"
              if curl -s --head ${URL} # test if blog.udacity. com exists
              then
               return 0
              else
               return 1
              fi
  create_and_deploy_front_end:
     docker:
        - image: amazon/aws-cli
     steps: 
       - checkout
       - run:
            name: Create Static S3 Website Bucket
            command: |
              aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name "my-"${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides NAME="my-"${CIRCLE_WORKFLOW_ID}
       - run: aws s3 sync . s3://"my-"${CIRCLE_WORKFLOW_ID} --delete --exclude "*" --include "index.html"
  get_last_deployment_id:
     docker:
        - image: amazon/aws-cli
     steps: 
       - checkout
       - run:
            name: Get the pipeline ID from last Production Deployment
            command: |
              echo "export PreviousPipelineID=$(aws cloudformation list-exports --query \
              "Exports[?Name==\`PipelineID\`].Value" --no-paginate --output text)"
  promote_to_production:
     docker:
        - image: amazon/aws-cli
     steps: 
       - checkout
       - run:
            name: Update Cloudformation and Cloudfront with new Bucket name
            command: |
              aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="my-"${CIRCLE_WORKFLOW_ID}
  clean_up_old_front_end:
     docker:
        - image: amazon/aws-cli
     steps: 
       - checkout
       - run:
            name: Clean up and remove previous S3 bucket and stack
            command: |
              echo ${PreviousPipelineID}"
              aws s3 rm "s3://${PreviousPipelineID}" --recursive
              aws cloudformation delete-stack --stack-name "${PreviousPipelineID}"

# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow 
  my_workflow:
    # Run the jobs
    jobs:
      #- print_hello
      #- print_world: 
      #    requires:
      #      - print_hello
      #- print_my_name
      # - create_infrastructure
      #- configure_infrastructure
      #- smoke_test:
      #    requires:
      #      - configure_infrastructure
      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - promote_to_production