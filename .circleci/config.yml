# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
# jobs section
jobs:
  print_hello: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Throw an error
          command: return 1
          when: always
      - run: 
          name: On Failure
          when: on_fail
          command: echo "Job failed"
  create_infrastructure:
     docker:
        - image: amazon/aws-cli
     steps: 
        - checkout
        - run:
            name: Ensure backend infrastrucutre exists
            command: |
              aws cloudformation deploy \
              --template-file template.yml \
              --stack-name my-stack
  configure_infrastructure:
     docker:
        - image: python:3.7-alpine3.11
     steps: 
        - checkout
        - add_ssh_keys:
            fingerprints: ["bb:7d:58:5e:44:1f:e0:48:8b:ab:e2:8c:4e:92:b5:ed"]
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible
        - run:
            name: Configure server using ansible playbook
            command: |
              ansible-playbook -i inventory.txt playbook.yml
  smoke_test:
     docker:
        - image: alpine:latest
     steps: 
        - run:
            name: Install dependencies
            command: |
              apk add --update curl
        - run:
            name: Execute smoke test
            command: |
              URL = "https://google.com" 
              if curl -s --head ${URL}
              then
               return 0
              else
               return 1
              fi

# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow 
  my_workflow:
    # Run the jobs
    jobs:
      # - print_hello
      #- print_world: 
      #    requires:
      #      - print_hello
      #- print_my_name
      #- create_infrastructure
      #- econfigure_infrastructure
      - smoke_test:
            requires:
              - configure_infrastructure
